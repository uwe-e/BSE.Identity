@using System.Globalization;
@using System.Linq;
@using BSE.Identity.Blazor.Client.Models;
@using BSE.Identity.Blazor.Client.ViewModels;
@using Microsoft.AspNetCore.Identity;

@inherits EditFormDialogBase;

@implements IDialogContentComponent<ChangePasswordViewModel>

@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<ChangeUserPassword> Localize

<EditForm Model="@Content" OnValidSubmit="@HandleValidSubmit">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Password())" />
            <FluentLabel Typo="Typography.PaneHeader">
                @Localize["Txt_PageHeader"]
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical">

            <DataAnnotationsValidator />
            <FluentValidationSummary />
            <ErrorMessenger @ref="ErrorMessenger" />

            <FluentTextField @bind-Value=@Content.Email TextFieldType="TextFieldType.Email" Disabled="true" style="width: 100%;">@Localize["Label_EmailAddress"]</FluentTextField>

            <FluentTextField @bind-Value=@Content.Password TextFieldType="TextFieldType.Password" style="width: 100%;">@Localize["Label_Password"]</FluentTextField>

            <FluentTextField @bind-Value=@Content.ConfirmPassword TextFieldType="TextFieldType.Password" style="width: 100%;">@Localize["Label_ConfirmPassword"]</FluentTextField>

        </FluentStack>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">@Localize["Btn_Submit"]</FluentButton>
        <FluentButton OnClick="@OnCancel">Cancel</FluentButton>
    </FluentDialogFooter>
</EditForm>

@code {
    [Parameter]
    public ChangePasswordViewModel? Content { get; set; }// = new ChangePasswordViewModel(Localize);

    protected override async Task HandleValidSubmit(EditContext editContext)
    {
        ErrorMessenger?.Errors.Clear();
        var user = await UserManager.FindByIdAsync(Content.UserId);
        if (user != null)
        {
            IdentityResult identityResult = await UserManager.RemovePasswordAsync(user)
                     .ContinueWith<IdentityResult>(resultTask =>
                     {
                         return UserManager.AddPasswordAsync(user, Content.Password).Result;
                     });

            if (!identityResult.Succeeded)
            {
                foreach(var error in identityResult.Errors)
                {
                    ErrorMessenger?.Errors.Add(error.Description);
                }
                ErrorMessenger?.ShowErrors();
                return;
            }
        }
        if (Dialog is not null)
        {
            await Dialog.CloseAsync();
        }
    }
}
