@page "/"
@using BSE.Identity.Blazor.Client.Data;
@using BSE.Identity.Blazor.Client.Models;
@using BSE.Identity.Blazor.Client.Pages.Shared
@using BSE.Identity.Blazor.Client.Threading;
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<Index> Localize
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ApplicationDbContext _context;

<FluentDialogProvider />

<PageTitle>@Localize["Txt_PageTitle"]</PageTitle>

@* <FluentToolbar Style="width: 100%">
    <FluentButton slot="start" Appearance="Appearance.Outline" OnClick="@OnRegisterUser" Disabled>
        <FluentIcon Slot="start" Value="@(new Icons.Regular.Size16.PeopleList())" Color="Color.Accent" />
        User Management
    </FluentButton>
    <FluentButton Appearance="Appearance.Stealth" OnClick="@OnRegisterUser">
        <FluentIcon Slot="start" Value="@(new Icons.Regular.Size16.FolderPerson())" Color="Color.Accent" />
        Role Management
    </FluentButton>
</FluentToolbar> *@
<NavigationBar/>

<FluentLabel Typo="@Typography.H2">@Localize["Txt_PageHeader"]</FluentLabel>

<FluentToolbar Style="width: 100%">
    <FluentButton slot="end" Appearance="Appearance.Accent" OnClick="@OnRegisterUser">
        <FluentIcon Slot="start" Value="@(new Icons.Regular.Size16.PeopleAdd())" Color="Color.Fill" />
        New User
    </FluentButton>
</FluentToolbar>

<FluentDataGrid id="manualGrid" Items="@Users" Virtualize="true" ItemSize="40" role="grid" TGridItem="UserRolesViewModel">
    <PropertyColumn Property="@(u => u.UserName)" Title="@Localize["Grid_Column_UserName"]" Sortable="true" />
    <PropertyColumn Property="@(u => u.FirstName)" Title="@Localize["Grid_Column_FirstName"]" Sortable="true" />
    <PropertyColumn Property="@(u => u.LastName)" Title="@Localize["Grid_Column_FirstName"]" Sortable="true" />
    <PropertyColumn Property="@(u => string.Join(' ' ,u.Roles))" Title="@Localize["Grid_Column_Roles"]" Sortable="true" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => OnEditUser(context))">
            <FluentIcon Value="@(new Icons.Regular.Size16.Edit())" Style="fill: var(--foreground-on-accent-rest)" />
        </FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => OnDeleteUser(context))">
            <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Style="fill: var(--foreground-on-accent-rest)" />
        </FluentButton>
    </TemplateColumn>
</FluentDataGrid>

@code {
    IQueryable<UserRolesViewModel>? Users;
    // SerialQueue serialQueue = new SerialQueue();
    // List<Task<UserRolesViewModel>> createUserRolesViewModelTasks = new List<Task<UserRolesViewModel>>();

    protected override Task OnInitializedAsync()
    {
        Users = GetApplicationUsers();
        return base.OnInitializedAsync();
    }


    void OnRegisterUser()
    {
        Navigation.NavigateTo("/Register");
    }

    void OnEditUser(UserRolesViewModel model)
    {
        Navigation.NavigateTo($"/edit/{model.UserId}");
    }

    async Task OnDeleteUser(UserRolesViewModel model)
    {
        string dialogResultYes = Localize.GetString("Dlg_Result_Yes");
        string dialogResultNo = Localize.GetString("Dlg_Result_No");
        string dialogTitle = Localize.GetString("Dlg_UserDeletion_Title");
        string dialogMessage = Localize.GetString("Dlg_UserDeletion_Message", model.UserName);

        var dialog = await DialogService.ShowConfirmationAsync(dialogMessage, dialogResultYes, dialogResultNo, dialogTitle);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var userToDelete = _context.Users.First<ApplicationUser>(u => u.Id == model.UserId);
            if (userToDelete != null)
            {
                var userId = userToDelete.Id;
                var deletionResult = await UserManager.DeleteAsync(userToDelete);
                if (deletionResult.Succeeded)
                {
                    Users = GetApplicationUsers();
                }
            }
        }
    }

    private IQueryable<UserRolesViewModel> GetApplicationUsers()
    {
        /*
         * this is because of that MySQL behaviour
         * https://mysqlconnector.net/troubleshooting/connection-reuse/
         *
         * the original query should be the use of UserManager.GetRolesAsync(user)
        */
        var users = UserManager.Users;
        var usersWithRoles = (from user in users
                              join userrole in _context.UserRoles
                              on user.Id equals userrole.UserId into userRolesGroup
                              from ur in userRolesGroup.DefaultIfEmpty()
                              join role in _context.Roles
                              on ur.RoleId equals role.Id into rolesGrpup
                              from r in rolesGrpup.DefaultIfEmpty()
                              select new UserRolesViewModel
                                  {
                                      UserId = user.Id,
                                      UserName = user.UserName,
                                      FirstName = user.FirstName,
                                      LastName = user.LastName,
                                      Roles = new List<string> { r.Name }
                                  }).ToList();

        return usersWithRoles.AsQueryable();
    }

    // private IQueryable<UserRolesViewModel> GetApplicationUsers()
    // {
    //     var users = UserManager.Users.AsEnumerable<ApplicationUser>();
    //     foreach (var applicationUser in users)
    //     {
    //         /*
    //         * this is because of that MySQL behaviour
    //         * https://mysqlconnector.net/troubleshooting/connection-reuse/
    //         */
    //         createUserRolesViewModelTasks.Add(serialQueue.Enqueue<UserRolesViewModel>(async () =>
    //         {
    //             return await GetUserWithRoles(applicationUser);
    //         }));
    //     }

    //     return createUserRolesViewModelTasks.Select(x => x.Result).AsQueryable();
    // }

    // private async Task<UserRolesViewModel> GetUserWithRoles(ApplicationUser applicationUser)
    // {
    //     return new UserRolesViewModel
    //         {
    //             UserId = applicationUser.Id,
    //             UserName = applicationUser.UserName,
    //             FirstName = applicationUser.FirstName,
    //             LastName = applicationUser.LastName,
    //             Roles = await UserManager.GetRolesAsync(applicationUser)
    //         };
    // }

    // private async Task<IList<string>> GetRolesAsync(ApplicationUser applicationUser)
    // {
    //     return await UserManager.GetRolesAsync(applicationUser);
    // }
}